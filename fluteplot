#!/usr/bin/python3
"""
Plot theoretical vs measured frequency for flute
Usage:
    fluteplot [--register=<reg>] FILES...
    fluteplot (-v | --version)
    fluteplot (-h | --help)

Options:
    -h --help           Show this screen.
    -v --version        Show version.
    --register=<reg>    Register number. [default: 1]

Example:
    embouchure --lt 770 --dt 14.3 --fb 210 --fr 222.145
"""
import subprocess
import os
import sys
import math
import pandas as pd
from tuning import helper
from tuning import temperament
from tuning import edo12
from acoustics import tube

try:
    from docopt import docopt
except ImportError:
    exit("This software refuses to run until docopt is installed:\n$ pip install docopt")

try:
    import matplotlib.pyplot as plt
except ImportError:
    exit("This software refuses to run until matplotlib is installed:\n$ pip install matplotlib")


def main(args):
    register = int(args['--register'])
    fig = plt.figure()

    freqlist = []
    ltlist = []

    for n, f in enumerate(args['FILES']):

        df = pd.read_csv(f)

        # Get info from .csv
        lt = df['Length']
        lmin = min(lt)
        lmax = max(lt)
        Dt = df['D'][0]
        dt = df['d'][0]
        gt = df['g'][0]

        # Use tube model to generate frequencies - length curve
        lrange = range(lmin, lmax, 1)
        tconfig = dict()
        tconfig['dt'] = dt
        tconfig['gt'] = gt
        tconfig['dle'] = 55 # TODO: adjust model with latest findings
        tconfig['holes'] = []

        frequencies = []
        for l in lrange:
            tconfig['lt'] = l
            t = tube.Tube(tconfig)
            a = t.analyze(registers=register)
            fr = a['register' + str(register)]['frequency'][0]
            frequencies.append(fr)

        plt.plot(lrange, frequencies, 
                 label="Theoretical H{} frequencies for d={}mm (Hz)".format(register, dt))

        h1 = df['H' + str(register)]
        frequencies = [x for x in h1]
        plt.plot(lt, frequencies, marker='o', label=f)

        freqlist += frequencies
        ltlist += list(lt)

    # Plot the 12-TET note names
    freqlist = [x for x in freqlist if x == x] # clean nan (breaks min/max)
    freq_min = min(freqlist)
    freq_max = max(freqlist)
    t = edo12.EDO12()
    t = t.filtered(lambda elem : elem[1] >= freq_min and elem[1] <= freq_max)
    note_name = list(t.keys())
    note_value = list(t.values())
    maxlength = max(ltlist)
    for i, value in enumerate(note_value):
        plt.axhline(y=value, linestyle=':')
        plt.text(maxlength, value, note_name[i])

    # Plot some other flutes for comparison
    # plt.plot([770], [387], marker='o', label="Mansur H2 (Hz)")
    # plt.plot([770], [421], marker='o', label="PPR #1 H2 (Hz)")
    # plt.plot([770], [409], marker='o', label="Kaval H2 (Hz)")

    plt.xlabel("Tube length (mm)")
    plt.ylabel("frequencies (Hz)")
    plt.legend()

    plt.show()

if __name__ == "__main__":
    try:
        version = str(subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']), 'utf-8').rstrip()
        modified = str(subprocess.check_output(['git', 'status', '--porcelain', '--untracked-files=no']), 'utf-8')
        scriptname = os.path.basename(__file__)
        version = "{}{}".format(version, '*' if scriptname in modified else '')
    except Exception as e:
        version = 'unknown'
    
    args = docopt(__doc__, version=version)
    main(args)
