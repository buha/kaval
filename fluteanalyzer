#!/usr/bin/python3
"""
A tool to analyze the tuning of a flute.
Takes dimensions as input and prints out acoustic analysis results.

Usage:
    fluteanalyzer [--temperament=<TEMP>] [--registers=<REG>] FILE
    fluteanalyzer (-v | --version)
    fluteanalyzer (-h | --help)

Options:
    -t --temperament=<TEMP>  Tuning temperament. [default: edo12]
    -r --registers=<REG>     Number of registers to analyze. [default: 2]
    -h --help                Show this screen.
    -v --version             Show version.

Example:
    ./fluteanalyzer analyzer/template.analyze.conf --temperament edo12 --registers 2
"""
import subprocess
import os
from math import log
from ast import literal_eval

try:
    from docopt import docopt
except ImportError:
    exit("This software refuses to run until docopt is installed:\n$ pip install docopt")

try:
    import configparser
except ImportError:
    exit("This software refuses to run until configparser is installed:\n$ pip install configparser")

from acoustics import tube
from tuning import helper
from tuning import temperament
from tuning import edo12

def main(args):
    filepath = args['FILE']
    registers = int(args['--registers'])
    temperament = args['--temperament']
    if temperament != 'edo12':
        print("Unknown tuning temperament {}".format(temperament))
        return
    
    temperament = edo12.EDO12()

    config = configparser.ConfigParser()
    config.read(filepath)

    lt = config.getfloat('tube','lt')
    dt = config.getfloat('tube','dt')
    gt = config.getfloat('tube','gt')
    dle = config.getfloat('tube','dle')

    hole_items = config.items("holes")
    holes = [literal_eval(hole) for key, hole in hole_items]

    # sort holes by first element (length)
    holes.sort(key=lambda tup: tup[0], reverse = True)

    tconfig = dict()
    tconfig['lt'] = lt
    tconfig['dt'] = dt
    tconfig['gt'] = gt
    tconfig['dle'] = dle
    tconfig['holes'] = holes
    t = tube.Tube(tconfig)
    a = t.analyze(registers=registers)
    print("Hole\tPosition (mm)\tDiameter (mm)\tFrequency (Hz)\tNearest (Hz)\tDiff (cents)\tEmbouchure\tWalls\tClosed holes\tEnd\tHole\tEquiv. Length")
    for r in a:
        print(r)
        nearest = [temperament.nearest(f) for f in a[r]['frequency']]
        for i, f in enumerate(a[r]['frequency']):
            print("{0}\t{1}\t\t{2}\t\t{3:.2f}\t\t{4:.2f} ({5})\t{6:.1f}\t\t{7:.2f}\t\t{8:.2f}\t{9:.2f}\t\t{10:.3f}\t{11:.2f}\t{12:.2f}".format(
                i,
                holes[i - 1][0] if i > 0 else '-',
                holes[i - 1][1] if i > 0 else '-',
                f,
                nearest[i][1],
                nearest[i][0],
                temperament.offset(nearest[0][1], f),
                a[r]['embouchure'][i],
                a[r]['wall'][i],
                a[r]['closed'][i],
                a[r]['end'][i],
                a[r]['hole'][i],
                a[r]['length'][i]
            ))

if __name__ == "__main__":
    try:
        version = str(subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']), 'utf-8').rstrip()
        modified = str(subprocess.check_output(['git', 'status', '--porcelain', '--untracked-files=no']), 'utf-8')
        scriptname = os.path.basename(__file__)
        version = "{}{}".format(version, '*' if scriptname in modified else '')
    except Exception as e:
        version = 'unknown'
    
    args = docopt(__doc__, version=version)
    main(args)
